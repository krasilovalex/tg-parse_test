from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from core.controller import run_parser 
from core.client import  get_telethon_client
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError
from aiogram.types import FSInputFile
import os
from pathlib import Path

parse_router = Router()
pending_auth = {}  # {user_id: {..., "awaiting_2fa_password": False}}
step_state = {}    # user_id: current_step
sender_auth = {} # sender –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
sender_step = {} # user_id: current_step

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É users.db
BD_PATH = Path("users.db").resolve()

@parse_router.message(Command("parse"))
async def start_parse(message: types.Message):
    user_id = message.from_user.id
    pending_auth[user_id] = {}
    step_state[user_id] = "awaiting_api_id"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>api_id</b>:", parse_mode=ParseMode.HTML)

@parse_router.message(lambda m: step_state.get(m.from_user.id))
async def parse_flow(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    if user_id not in step_state:
        return  # –ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ /parse

    step = step_state[user_id]

    try:
        if step == "awaiting_api_id":
            pending_auth[user_id]["api_id"] = int(text)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>api_hash</b>:", parse_mode=ParseMode.HTML)
            step_state[user_id] = "awaiting_api_hash"

        elif step == "awaiting_api_hash":
            pending_auth[user_id]["api_hash"] = text
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>phone_number</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7...:", parse_mode=ParseMode.HTML)
            step_state[user_id] = "awaiting_phone"

        elif step == "awaiting_phone":
            pending_auth[user_id]["phone"] = text
            await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–ø–∞—Ä–æ–ª—å</b> (–µ—Å–ª–∏ 2FA –≤–∫–ª—é—á–µ–Ω–∞, –∏–Ω–∞—á–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª):", parse_mode=ParseMode.HTML)
            step_state[user_id] = "awaiting_password"

        elif step == "awaiting_password":
            pending_auth[user_id]["password"] = text
            await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>system_version</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: Windows 11):", parse_mode=ParseMode.HTML)
            step_state[user_id] = "awaiting_system"

        elif step == "awaiting_system":
            pending_auth[user_id]["system"] = text
            await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>device_model</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: PC Club):", parse_mode=ParseMode.HTML)
            step_state[user_id] = "awaiting_device"

        elif step == "awaiting_device":
            pending_auth[user_id]["device"] = text
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", parse_mode=ParseMode.HTML)
            step_state[user_id] = "awaiting_links"

        elif step == "awaiting_links":
            pending_auth[user_id]["group_links"] = text
            await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø–∞—Ä—Å–∏–Ω–≥...")

            data = pending_auth[user_id]
            client, is_code_required = await get_telethon_client(
                data["api_id"],
                data["api_hash"],
                data["phone"],
                data["password"],
                data["device"],
                data["system"]
            )

            if is_code_required:
                await message.answer("üì≤ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ Telegram:")
                step_state[user_id] = "awaiting_code"
                pending_auth[user_id]["client"] = client
                return

            await finish_parsing_flow(message, data, client)

            del pending_auth[user_id]
            del step_state[user_id]

        elif step == "awaiting_code":
            client = pending_auth[user_id]["client"]
            phone = pending_auth[user_id]["phone"]
            password = pending_auth[user_id]["password"]
            code = text

            try:
                await client.sign_in(phone, code)
            except SessionPasswordNeededError:
                try:
                    await client.sign_in(password=password)
                except Exception as e:
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è 2FA: {e}")
                    return
            except PhoneCodeInvalidError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–µ—Ä...")

            data = pending_auth[user_id]
            await finish_parsing_flow(message, data, client)

            del pending_auth[user_id]
            del step_state[user_id]

    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


async def finish_parsing_flow(message, data, client):
    try:
        group_links = [link.strip() for link in data["group_links"].split(",") if link.strip()]
        results = await run_parser(group_links, client)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
        msg = "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω:\n"
        for group, count in results.items():
            msg += f"{group}: {count}\n"
        await message.answer(msg)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if os.path.exists(BD_PATH):
            file_size = os.path.getsize(BD_PATH)
            if file_size > 0:
                try:
                    file = FSInputFile(path=BD_PATH, filename="users.db")
                    await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ë–î –ø–æ –ø—É—Ç–∏: {BD_PATH}")
                    await message.answer_document(FSInputFile(BD_PATH), caption="üì¶ –í–æ—Ç –≤–∞—à–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö users.db –¥–ª—è /sender")
                    
                    # –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    with open(BD_PATH, 'w', encoding="utf-8") as f:
                        f.truncate(0)
                except Exception as send_err:
                    await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª users.db: {send_err}")
            else:
                await message.answer("‚ö†Ô∏è –§–∞–π–ª users.db –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.")
        else:
            await message.answer(f"‚ùå –§–∞–π–ª users.db –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–ü—É—Ç—å: {BD_PATH}")
    
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
