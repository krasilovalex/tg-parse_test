from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from utils.load_auth_data import load_auth_data
from aiogram.types import FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import StatesGroup, State
from core.client import get_telethon_client
from core.controller import run_sender
from services.bd_operations import BaseData
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError
import os
import logging
from pathlib import Path
import asyncio
import traceback
import sqlite3

BD_PATH = Path("users.db").resolve()

sender_router = Router()

class SenderStates(StatesGroup):
    awaiting_api_id = State()
    awaiting_api_hash = State()
    awaiting_phone = State()
    awaiting_password = State()
    awaiting_code = State()
    awaiting_db_choice = State()
    awaiting_db_file = State()
    awaiting_message_text = State()


def check_db_structure(db_path: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã SQLite –±–∞–∑—ã - –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã users —Å –∫–æ–ª–æ–Ω–∫–æ–π user_id."""
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        cursor.execute("PRAGMA table_info(users_data)")
        columns = [col[1] for col in cursor.fetchall()]

        required_columns = {"user_id"}
        if not required_columns.issubset(set(columns)):
            return False

        conn.close()
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã: {e}")
        return False

@sender_router.message(Command("sender"))
async def start_sender(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /sender –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    await state.clear()

    auth_data = load_auth_data()
    if user_id not in auth_data:
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        keyboard = InlineKeyboardMarkup(inline_keyboard= [
            [InlineKeyboardButton(text="‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç", callback_data = "sender_saved")],
            [InlineKeyboardButton(text="‚ûï –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç", callback_data="enter_sender")]
        ])
        await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–Ω–µ–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard)
    else:
        await state.set_state(SenderStates.awaiting_api_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>api_id</b>:", parse_mode=ParseMode.HTML)

@sender_router.message(SenderStates.awaiting_api_id)
async def input_api_id(message: types.Message, state: FSMContext):
    try:
        api_id = int(message.text.strip())
    except (ValueError, AttributeError):
        await message.answer("‚ùå api_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    await state.update_data(api_id=api_id)
    await state.set_state(SenderStates.awaiting_api_hash)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>api_hash</b>:", parse_mode=ParseMode.HTML)

@sender_router.message(SenderStates.awaiting_api_hash)
async def input_api_hash(message: types.Message, state: FSMContext):
    api_hash = message.text.strip()
    await state.update_data(api_hash=api_hash)
    await state.set_state(SenderStates.awaiting_phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>phone_number</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7...:", parse_mode=ParseMode.HTML)

@sender_router.message(SenderStates.awaiting_phone)
async def input_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    await state.update_data(phone=phone)
    await state.set_state(SenderStates.awaiting_password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–ø–∞—Ä–æ–ª—å</b> (–µ—Å–ª–∏ 2FA –≤–∫–ª—é—á–µ–Ω–∞, –∏–Ω–∞—á–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª):", parse_mode=ParseMode.HTML)


@sender_router.message(SenderStates.awaiting_password)
async def input_device(message: types.Message, state: FSMContext):
    device = message.text.strip()
    await state.update_data(device=device)

    data = await state.get_data()

    try:
        client, is_code_required = await get_telethon_client(
            data["api_id"],
            data["api_hash"],
            data["phone"],
            data["password"],
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telethon: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ get_telethon_client: {e}\n{traceback.format_exc()}")
        await state.clear()
        return

    if is_code_required:
        await state.update_data(client=client)
        await state.set_state(SenderStates.awaiting_code)
        await message.answer("üì≤ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ Telegram:")
    else:
        await state.update_data(client=client)
        await state.set_state(SenderStates.awaiting_db_choice)
        keyboard_db = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É", callback_data='use_local_db')], 
            [InlineKeyboardButton(text="üì§–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π —Ñ–∞–π–ª –±–∞–∑—ã", callback_data='send_custom_db')]
        ])
        await message.answer("üìé –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=keyboard_db)

@sender_router.message(SenderStates.awaiting_code)
async def input_code(message: types.Message, state: FSMContext):
    code = message.text.strip()
    data = await state.get_data()
    client = data.get("client")
    phone = data.get("phone")
    password = data.get("password")

    try:
        await client.sign_in(phone, code)
    except SessionPasswordNeededError:
        try:
            await client.sign_in(password=password)
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è 2FA: {e}")
            return
    except PhoneCodeInvalidError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}\n{traceback.format_exc()}")
        return

    await state.set_state(SenderStates.awaiting_db_choice)
    keyboard_db = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É", callback_data='use_local_db')], 
            [InlineKeyboardButton(text="üì§–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π —Ñ–∞–π–ª –±–∞–∑—ã", callback_data='send_custom_db')]
        ])
    await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=keyboard_db)

@sender_router.message(SenderStates.awaiting_db_file, F.document)
async def handle_sender_db(message: types.Message, state: FSMContext):
    file = message.document
    if not file.file_name.endswith(".db"):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π .db —Ñ–∞–π–ª.")
        return

    user_id = message.from_user.id
    db_path = f"temp_users_{user_id}.db"

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ bot.download, –µ—Å–ª–∏ download —É document –Ω–µ—Ç
        await message.bot.download(file=file.file_id, destination=db_path)

        logging.info(f"User {user_id} –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª –±–∞–∑—ã {db_path}, size={os.path.getsize(db_path)}")
        await state.update_data(db_path=db_path)
        await state.set_state(SenderStates.awaiting_message_text)
        await message.answer("‚úâÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –æ—Ç user {user_id}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")


@sender_router.message(SenderStates.awaiting_message_text)
async def input_message_text(message: types.Message, state: FSMContext):
    text = message.text.strip()
    data = await state.get_data()

    if not data.get("db_path"):
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        return

    await state.update_data(message_text=text)

    bd = BaseData(data["db_path"])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    required_params = ("api_id", "api_hash", "phone", "password")
    if not all(param in data for param in required_params):
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telethon –∑–∞–¥–∞–Ω—ã.")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–µ, –ø–µ—Ä–µ–¥–∞–≤–∞—è –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    client = data.get("client")
    asyncio.create_task(run_sender(
        client=client,
        bd=bd,
        message_text=text
    ))

    await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ!")

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        os.remove(data["db_path"])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã {data['db_path']}: {e}")
        
    await message.answer("‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    await state.clear()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ---
@sender_router.callback_query(F.data == "sender_saved")
async def sender_choice_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    data = load_auth_data()

    if user_id not in data:
        await callback.message.edit_text("‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ /start")
        return
    
    user_data = data[user_id]
    await state.update_data(
        api_id=int(user_data['api_id']),
        api_hash=user_data['api_hash'],
        phone=user_data['phone'],
        password=user_data['password'],
    )

    try:
        client, is_code_required = await get_telethon_client(
            user_data['api_id'],
            user_data['api_hash'],
            user_data['phone'],
            user_data['password'],
        )
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telethon : {e}\n{traceback.format_exc()}")
        await state.clear()
        return
    
    await state.update_data(client=client)

    keyboard_db = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É", callback_data='use_local_db')], 
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π —Ñ–∞–π–ª –±–∞–∑—ã", callback_data='send_custom_db')]
    ])

    if is_code_required:
        await state.set_state(SenderStates.awaiting_code)
        await callback.message.edit_text("üì≤ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ Telegram")
    else:
        await state.set_state(SenderStates.awaiting_db_choice)
        await callback.message.edit_text(
            "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\nüìé –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", 
            reply_markup=keyboard_db
        )


@sender_router.callback_query(F.data == "enter_sender")
async def enter_sender_auth(callback: types.CallbackQuery, state : FSMContext):
    await state.set_state(SenderStates.awaiting_api_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>api_id</b>", parse_mode= ParseMode.HTML)
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –±–∞–∑—ã ---

@sender_router.callback_query(F.data == 'use_local_db')
async def use_local_db_hanlder(callback: types.CallbackQuery, state:FSMContext):
    local_db_path = BD_PATH # –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞

    if not Path(local_db_path).exists():
        await callback.message.answer("‚ùå –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    if not check_db_structure(local_db_path):
        await callback.message.answer("‚ùå –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.")

    await state.update_data(db_path=local_db_path)
    await callback.message.answer("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –≤—ã–±—Ä–∞–Ω–∞.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    await state.set_state(SenderStates.awaiting_message_text)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∞–π–ª –±–∞–∑—ã
@sender_router.callback_query(F.data == 'send_custom_db')
async def request_custom_db(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(SenderStates.awaiting_db_file)
    await callback.message.edit_text("üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö <b>.db</b>", parse_mode=ParseMode.HTML)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º, –∫–æ–≥–¥–∞ –±–æ—Ç –∂–¥—ë—Ç —Ñ–∞–π–ª –±–∞–∑—ã
@sender_router.message(SenderStates.awaiting_db_file)
async def handle_sender_db(message: types.Message, state: FSMContext):
    if not message.document:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .db")
        return

    file = message.document
    if not file.file_name.endswith(".db"):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π .db —Ñ–∞–π–ª.")
        return

    user_id = message.from_user.id
    db_path = f"temp_users_{user_id}.db"

    try:
        await message.bot.download(file=file.file_id, destination=db_path)
        logging.info(f"User {user_id} –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª –±–∞–∑—ã {db_path}, size={os.path.getsize(db_path)}")

        if not check_db_structure(db_path):
            await message.answer("‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —ç—Ç–∞–ª–æ–Ω–æ–º. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª.")
            os.remove(db_path)
            return

        await state.update_data(db_path=db_path)
        await state.set_state(SenderStates.awaiting_message_text)
        await message.answer("‚úâÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –æ—Ç user {user_id}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞")
